def collate_fn(batch, processor):
    pixel_values = [item['pixel_values'] for item in batch]
    pixel_mask = [item['pixel_mask'] for item in batch]
    labels = [item['labels'] for item in batch]
    sizes = torch.stack([item['size'] for item in batch])
    padded_batch = processor.pad(
        {'pixel_values': pixel_values, 'pixel_mask': pixel_mask},
        return_tensors="pt"
    )
    return {
        'pixel_values': padded_batch['pixel_values'],
        'pixel_mask': padded_batch['pixel_mask'],
        'labels': labels,
        'size': sizes
    }


__getitem__에서 squeeze 제거

encoding = self.processor(images=image, annotations=coco_anns, return_tensors="pt")
encoding['size'] = torch.tensor([img_info['height'], img_info['width']])
return encoding



DataLoader에 collate_fn 전달

train_loader = DataLoader(
    train_dataset, batch_size=batch_size, shuffle=True, 
    collate_fn=lambda batch: collate_fn(batch, processor)
)
